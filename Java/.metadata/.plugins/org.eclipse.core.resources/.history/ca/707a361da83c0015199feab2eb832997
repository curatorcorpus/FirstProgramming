
/**
 * StopWatchPanel2.java
 * 
 * 6th August 2015, 0342
 * 
 * Author: Jung-Woo (Noel) Park
 * "박정우"
 */
package StopWatchApp3;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.text.DecimalFormat;

public class StopWatchPanel3 extends JPanel {
	/** component data fields */
	private JPanel displayPanel = new JPanel();
	private JButton startButton = new JButton("Start");
	private JButton pauseButton = new JButton("Pause");
	private JButton resetButton = new JButton("Reset");
	private JLabel display = new JLabel("00:00:00:00", SwingConstants.CENTER);
	
	/** listener instance variables */
	private StartListener startEvent = new StartListener();
	private PauseListener pauseEvent = new PauseListener();
	private ResetListener resetEvent = new ResetListener();
	
	/** timer instantiation: recalls events */
	private Timer run = new Timer(0, startEvent);
	
	private long currentTime, currentRunTime, estimate, referenceTime, runTime;
	
	/** constructor method */
	public StopWatchPanel3(){
		
		// display panel settings
		displayPanel.setPreferredSize(new Dimension(300, 100));
		
		// add component listeners
		startButton.addActionListener(startEvent);
		pauseButton.addActionListener(pauseEvent);
		resetButton.addActionListener(resetEvent);
		
		// component settings
		display.setFont(new Font("Serif", Font.BOLD, 45));
		display.setPreferredSize(new Dimension(300, 50));
		
		// add components
		displayPanel.add(display);
		displayPanel.add(startButton);
		displayPanel.add(pauseButton);
		displayPanel.add(resetButton);
		
		// add to main panel
		add(displayPanel);
	} // constructor ends
	
	/** class listener checks for action events */
	private class StartListener implements ActionListener{
		/** time value data fields */
		private long mins, hrs, milsec, secs;
		private DecimalFormat format = new DecimalFormat("00");
		private Thread thread = new Thread();
		
		/** method that keeps track of elapsed (current process) time */
		private void elapsedTime(){
			// convert to milliseconds
			runTime = System.nanoTime()/1000000;
			estimate = runTime - referenceTime;
			
			// calculates current time in milsec, sec, mins, hours
			milsec = estimate/10 - estimate/10/100*100;
			secs = (estimate/1000)%60;
			mins = (estimate/60000)%60;
			hrs = (estimate/3600000)%24;
			
			// check if limited reached
			if(hrs > 23){
				run.stop();
			}
			
			// displays time
			display.setText(format.format(hrs)+":"+
							format.format(mins)+":"+
							format.format(secs)+":"+
							format.format(milsec));
			
		} // method ends
		
		/** action performed method automatically called */
		public void actionPerformed(ActionEvent e){
			// set initial delay
			run.setInitialDelay(0);
			
			try{
				thread.start();
			}
			catch(IllegalThreadStateException error){
				error.printStackTrace();
			}
			
			if(e.getSource().equals(startButton)){
				if(currentTime == 0){
					run.start();
					referenceTime = System.nanoTime()/1000000;
				}
				else{
					run.start();
					referenceTime = currentTime;
					runTime = currentRunTime;
				}
			}
			
			if(e.getSource().equals(run)){
				elapsedTime();
			}
		} // method ends
	} // class startListener ends
	
	/** stop action event listener class */
	private class PauseListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			try{
				Thread.sleep(999999999);
			}
			catch(InterruptedException error){
				error.printStackTrace();
			}
			currentTime = referenceTime;
			currentRunTime = runTime;
			run.stop();
		}
	} // class ends
	
	/** reset action event listener class */
	private class ResetListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			run.stop();
			display.setText("00:00:00:00");
		}
	} // class ends
} // fin.
