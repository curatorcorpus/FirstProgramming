/**
 * BoidInterfacePanel.java
 * Started: 11th August 2015, Time: 2329
 * @author Jung Woo Park
 * Finished:
 * 
 * main interface panel for flocking simulation
 */

/** import standard java class object libraries */
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

public class BoidInterfacePanel extends JPanel{
  /** create boid array list */
  private ArrayList <CreateBoid> boids = new ArrayList<CreateBoid>();
  
  /** limit for boid particles */
  private final int LIMIT = 100;
  
  /** create listener instance */
  private ButtonListener actionListener  = new ButtonListener();
  
  /** creates buttons */
  private JButton startButton = new JButton("Start");
  private JButton stopButton = new JButton("Stop");
  private JButton createBoidButton = new JButton("Create");
  private JButton flock = new JButton("Flock");
  
  /** creates labels */
  private JLabel controlLabel = new JLabel("Controls", SwingConstants.CENTER);
  private JLabel createBoids = new JLabel("Create Boids", SwingConstants.CENTER);
  
  /** creates text field */
  private JTextField inputBoidNum = new JTextField();
  
  // delay
  private final int EVENT_DELAY = 0;
  
  // timer to recall events
  private Timer run = new Timer(EVENT_DELAY, actionListener);
  
  /** size of display */
  private final int MONITORWIDTH = 1920, MONITORHEIGHT = 1080;
  
  /** size of control panel */
  private final int PANELWIDTH = 100, PANELHEIGHT = 1080;
  
  /** number of boids to create */
  private int numOfBoids;
  
  /** constructor method */
  public BoidInterfacePanel(){
    // create main panel
    JPanel mainPanel = new JPanel();
    
    // main panel settings
    mainPanel.setPreferredSize(new Dimension(1920, 1080));
    mainPanel.setLayout(new GridBagLayout());
    
    // create panel
    JPanel controlPanel = new JPanel();
    
    // grid bag constraints
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    
    // create gridlayout
    GridLayout grid = new GridLayout(35, 1);
    
    // control Panel settings
    controlPanel.setLayout(grid);
    controlPanel.setPreferredSize(new Dimension(PANELWIDTH, PANELHEIGHT));
    controlPanel.setBackground(new Color(20, 20, 20));
    
    // add listeners 
    startButton.addActionListener(actionListener);
    stopButton.addActionListener(actionListener);
    inputBoidNum.addKeyListener(actionListener);
    createBoidButton.addActionListener(actionListener);
    
    // component settings
    controlLabel.setForeground(Color.white);
    createBoids.setForeground(Color.white);
    
    // add control components
    controlPanel.add(controlLabel);
    controlPanel.add(flock);
    controlPanel.add(startButton);
    controlPanel.add(stopButton);
    controlPanel.add(createBoids);
    controlPanel.add(inputBoidNum);
    controlPanel.add(createBoidButton);
    
    // add to main panel
    mainPanel.add(new DrawPanel(), gbc);
    gbc.gridx = MONITORWIDTH - PANELWIDTH;
    mainPanel.add(controlPanel, gbc);
    
    // add to main window
    add(mainPanel);
  }
  
  private class DrawPanel extends JPanel{
    /** drawPanel constructor */
    private DrawPanel(){
      // draw panel settings
      setPreferredSize(new Dimension(MONITORWIDTH - PANELWIDTH, MONITORHEIGHT));
    }
    
    public void paintComponent(Graphics g){
      // refers to inherited constructor
      super.paintComponent(g);
      setBackground(Color.black);
      
      // display boid
      for(int index = 0; index < boids.size(); index++){
        boids.get(index).display(g);
      }
    } // constructor ends 
  }
  
  private class ButtonListener implements KeyListener, ActionListener{
    private void createBoidsInstances(){
      try{
	// empty boid object array list
        boids.clear();

        numOfBoids = Integer.parseInt(inputBoidNum.getText());
        if(numOfBoids > LIMIT){
          JOptionPane.showMessageDialog(null, "Limit Reached!");
          return;
        }
      } catch(NumberFormatException error){
        JOptionPane.showMessageDialog(null, "Error Invalid Integer!");
      }
      
      // creates boid particles and captures center point coordinates
      for(int index = 0; index < numOfBoids; index++){
        // create new instance object
        boids.add(index, new CreateBoid());
      }
    } // method ends
    
    public void actionPerformed(ActionEvent e){
      if(e.getSource().equals(startButton)){
        run.start();
      }
      
      // check for possible collision threats
      if(e.getSource().equals(run)){
	  for(CreateBoid boid : boids){
	      boid.possibleCollisionThreats(boids.size(), boids);
	  }
        }
      
      // move the object
      if(e.getSource().equals(run)){
        for(CreateBoid boid : boids){
          boid.move();
        }
      }
      
      // if stop button is pressed
      if(e.getSource().equals(stopButton)){
        run.stop();
      }
      
      // if create button is pressed
      else if(e.getSource().equals(createBoidButton)){
        createBoidsInstances();
      }
      
      // update instance boids
      repaint();
    }
    
    // if enter is pressed note: working == false
    public void keyPressed(KeyEvent event){
      if(event.getKeyCode() == KeyEvent.VK_ENTER){
      }
    }
    
    // methods that are dormant 
    public void keyTyped(KeyEvent event){}
    public void keyReleased(KeyEvent event){}
  }
}

