// import gui library
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
// import date library
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.Calendar;

// import sound library
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.text.Text;

public class AlarmPanel extends JPanel{
    // combo box values
    private final String[] hourOfDay = {"am", "pm"};
    
    // components
    private JLabel timeDisplay = new JLabel("", SwingConstants.CENTER);
    private JLabel dateDisplay = new JLabel("", SwingConstants.CENTER);
    
    private JFormattedTextField setHour = new JFormattedTextField();
    private JFormattedTextField setMin = new JFormattedTextField();
    private JFormattedTextField setSec =  new JFormattedTextField();
    
    private JComboBox<String> setHourOfDay = new JComboBox<String>(hourOfDay);
    
    private JButton setAlarm = new JButton("Set Alarm");
    private JButton stopAlarm = new JButton("Stop Alarm");
    
    
    // listener
    private Listener listen = new Listener();
    
    private Timer run = new Timer(0, listen);
    
    // date and time components
    private Calendar cal = Calendar.getInstance();
    
    private DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    private DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
    
    private DecimalFormat timeLayout = new DecimalFormat("00");
    private int fontSize = 20;
    
    // input time font settings
    private Font f1 = new Font("SansSerif", Font.PLAIN, 20);
    
    /** constructor */
    public AlarmPanel(){
	// set current time zone
	timeFormat.setTimeZone(TimeZone.getTimeZone("NZDT"));
	
	JPanel controlPanel = new JPanel();
	
	// panel layout
	
	
	// set layout
	
	
	// set size
	setPreferredSize(new Dimension(300, 300));
	
	// component settings 
	timeDisplay.setFont(new Font("san-serif", Font.PLAIN, fontSize));
	dateDisplay.setFont(new Font("san-serif", Font.PLAIN, fontSize));
	
	setHourOfDay.setEditable(true);
	setHourOfDay.setPreferredSize(new Dimension(60, 30));
	setHourOfDay.setFont(f1);
	
	setAlarmTextFieldSettings(setHour);
	setAlarmTextFieldSettings(setMin);
	setAlarmTextFieldSettings(setSec);
	
	// start time
	run.start();

	// add listeners to component
	setAlarm.addActionListener(listen);
	
	// adding focus listeners
	setTabFocusJFTF(setHour);
	setTabFocusJFTF(setMin);
	setTabFocusJFTF(setSec);
	
	setTabFocusJCB(setHourOfDay);
	
	// control panel settings
	controlPanel.setPreferredSize(new Dimension(200, 150));
	
	// add components to control panel
	controlPanel.add(setHour);
	controlPanel.add(setMin);
	controlPanel.add(setSec);
	controlPanel.add(setHourOfDay);
	
	controlPanel.add(setAlarm);
	controlPanel.add(stopAlarm);
	
	// add to main window
	add(dateDisplay);
	add(timeDisplay);
	add(controlPanel);
    }
    
    /** support method for setting alarm time text field format */
    private void setAlarmTextFieldSettings(JFormattedTextField component){
	component.setHorizontalAlignment(SwingConstants.CENTER);
	component.setPreferredSize(new Dimension(36, 30));
	component.setFont(f1);
	component.setText("00");
    }
    
    /** makes alarm time textfields focusable by tab */
    private void setTabFocusJFTF(JFormattedTextField component){
	component.addFocusListener(new FocusAdapter(){
	    public void focusGained(FocusEvent e){
		SwingUtilities.invokeLater(new Runnable(){
		    public void run(){
			component.selectAll();
		    }
		});
	    }
	});
    }
    
    /** makes alarm time combo box focusable by tab */
    private void setTabFocusJCB(JComboBox<String> component){
	Runnable doRun = new Runnable(){
	    public void run(){
		component.getEditor().setItem("am");
		component.getEditor().selectAll();
		component.requestFocus();
	    }
	};
	
	SwingUtilities.invokeLater(doRun);
	
    }
    
    private class Listener implements ActionListener{
	// needs to be modified
	private int seconds, minutes, hours; 
	private String hourOfDay;
	private boolean alarmIsSet = false;
	private int alarmHour, alarmMin;
	private String alarmHourOfDay;
	private int amPm;
	private boolean started = false;
	
	/** method updates current time */
	private void currentTime(){
	    // current time components
	    seconds = cal.get(Calendar.SECOND);
	    minutes = cal.get(Calendar.MINUTE);
	    hours = cal.get(Calendar.HOUR);
	    amPm = cal.get(Calendar.AM_PM);
		
	    // check if time of day is am or pm
	    switch(amPm){
	    case 0:
		hourOfDay = "am";
		break;
		
	    case 1:
		hourOfDay = "pm";
		break;
	    }
		
	    // if current hours is midnight hence 00
	    if(hours == 0){
		hours = 12;
	    }
	    
	    // display current time
	    timeDisplay.setText(timeLayout.format(hours)+":"+
				timeLayout.format(minutes)+":"+		
				timeLayout.format(seconds)+" "+				
				hourOfDay);
		
	    // update time object
	    cal = Calendar.getInstance();
	}
	
	private void currentDate(){
	    dateDisplay.setText(dateFormat.format(cal.getTime()));
	}
	
	private void playAlarmRingTone(){
	    // music files
	    File file = new File("alarmMusic.wav");
	    Thread t = new Thread(new Runnable() {
		    public void run(){
		try{
		    Clip clip = AudioSystem.getClip();
		    clip.open(AudioSystem.getAudioInputStream(file));
		    clip.start();
		} catch(Exception error){
		    System.err.println(error.getMessage());
		}
	      }    
	    });
	    if(started){
		t.start();
		started = false;
	    }
	}
	
	public void actionPerformed(ActionEvent e){
	    // set alarm options
	    if(e.getSource() == setAlarm){
		alarmHour = Integer.parseInt(setHour.getText());
		alarmMin = Integer.parseInt(setMin.getText());
		alarmHourOfDay = (String)setHourOfDay.getSelectedItem();

		// indicates that alarm is set
		alarmIsSet = true;
	    }
	    
	    // keep time running
	    if(e.getSource() == run){
	
		// check if alarm is set
		if(alarmIsSet){

		    if(hours == alarmHour && 
			    minutes == alarmMin && 
			    hourOfDay.equals(alarmHourOfDay)){
			alarmIsSet = flase;
		    }
		}
		
		// update 
		currentTime();
		currentDate();
	    }
	    
	    // stop the alarm
	    if(e.getSource() == stopAlarm){
	    }
	}
    }
}
